package cfm.core.managers{		import flash.events.*;	import flash.media.*;	import flash.net.*;	import flash.utils.*;
	public class CFM_SoundManager{				public static var soundOffTransform:SoundTransform;		public static var allSoundsOn:Boolean = true;		public static var globalVolMultiplier:Number = 1;				{			trace("Init - SoundManager");		}				private static var clipArray:Array = [];				{			soundOffTransform = new SoundTransform(0);			clipArray = [];		}				public static function pauseAllClips():void{			for each(var so:Object in clipArray){				so.time = SoundChannel(so.chnl).position;				SoundChannel(so.chnl).stop();			}		}				public static function resumeAllClips():void{			if(allSoundsOn){				for each(var so:Object in clipArray){					Sound(so.snd).play(so.time,so.loop,so.trans);				}			}		}				public static function turnAllClipsSoundOff():void{			for each(var so:Object in clipArray){				SoundChannel(so.chnl).soundTransform = soundOffTransform;			}		}				public static function turnAllClipsSoundOn():void{			if(allSoundsOn){				for each(var so:Object in clipArray){					SoundChannel(so.chnl).soundTransform = so.trans;				}			}		}				public static function killAllLoopClips():void{			for each(var so:Object in clipArray){								var sc:SoundChannel = so.chnl;				var s:Sound = so.snd;				sc.stop();				try{					s.close();				} catch (error:Error){									}				sc = null;				s = null;			}						clipArray = [];		}				public static function playSoundClip(surl:String,  loop:Number = 0, Fvolume:Number = 1):void{			if(allSoundsOn){				var sclip:Sound = new Sound(new URLRequest(surl));				var cchan:SoundChannel = new SoundChannel();				var ctrans:SoundTransform = new SoundTransform(Fvolume*globalVolMultiplier, 0);								cchan = sclip.play(0, loop, ctrans);								var alreadyHere:Boolean = false;				for each(var s:Object in clipArray){					if(s.url == surl){						alreadyHere = true;					}				}								clipArray.push({url:surl, chnl:cchan, snd:sclip, trans:ctrans, loop:loop, time:0} );			}		}		  }}