package cfm.core.ui
{
	import cfm.core.events.CFM_DropdownMenuEvent;
	import cfm.core.events.CFM_SimpleButtonEvent;
	import cfm.core.objects.CFM_Object;
	
	import com.greensock.TweenMax;
	
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.filters.DropShadowFilter;
	import flash.utils.getDefinitionByName;
	
	public class CFM_DropdownMenu extends CFM_Object
	{
		public var ITEM_SPACING:Number = -1;
		public var ITEM_HOLDER_MARGIN:Number = 2;
		
		public var buttonLabelParams:Object;
		public var itemLabelParams:Object;
		public var ItemClass:Class;
		public var ButtonClass:Class;
		public var itemList:XMLList;
		
		public var itemHolder:Sprite;
		public var itemHolderMask:Sprite;
		public var itemArray:Array;
		
		public var button:CFM_SimpleButton;
		public var item:CFM_SimpleButton;
		public var labelText:String;
		public var menuOpen:Boolean;
		public var currentSelection:String;
		
		public var myId:Number;
		
		public function CFM_DropdownMenu(	_myId:Number, 
										 	_itemList:XMLList, 
											 _labelText:String, 
											 _buttonLabelParams:Object, 
											 _itemLabelParams:Object, 
											 _buttonClass:Class, 
										 	_itemClass:Class,
											_autoInit:Boolean = true,
											_autoDestroy:Boolean = true)
		{			
			menuOpen = false;
			itemArray = [];
			myId = _myId;
			itemList = _itemList;
			itemLabelParams = _itemLabelParams;
			buttonLabelParams = _buttonLabelParams;
			labelText = _labelText;
			currentSelection = labelText;
			ItemClass = _itemClass;
			ButtonClass = _buttonClass;
			
			super("CFM_DropdownMenu",_autoInit,_autoDestroy);
		}
		
		override protected function build():void{				
			button = new CFM_SimpleButton(buttonLabelParams,0,labelText,"button","",false,false,false,false) as CFM_SimpleButton;
			addChild(button);
			
			itemHolder = new Sprite();
			itemHolder.filters = [new DropShadowFilter(2,45,0,.2,6,6)];
			addChild(itemHolder);
			
			itemHolderMask = new Sprite();
			addChild(itemHolderMask);
			
			buildItems();
			
			itemHolder.y = itemHolderMask.y = button.height + ITEM_HOLDER_MARGIN;
			itemHolderMask.graphics.beginFill(0xEEEEEE);
			itemHolderMask.graphics.drawRect(0,0, itemHolder.width, itemHolder.height);
			itemHolderMask.graphics.endFill();
			itemHolder.mask = itemHolderMask;
			itemHolder.visible = false;
			itemHolder.alpha = 0;
			itemHolderMask.scaleY = 0;
			
			itemHolder.graphics.beginFill(0xDDDDDD);
			itemHolder.graphics.drawRect(0,0, itemHolder.width, itemHolder.height);
			itemHolder.graphics.endFill();
		}
		
		public function buildItems():void{
			var iid:Number = 0;
			for	each(var i:XML in itemList){
				item = new CFM_SimpleButton(itemLabelParams,iid,i.@id,i.@id,"",false,false,false,false) as CFM_SimpleButton;
				
				item.y =iid > 0 ?  Math.round((itemArray[iid-1].y + itemArray[iid-1].height + ITEM_SPACING)) : 1;
				
				itemArray.push(item);
				itemHolder.addChild(item);
				iid++;
			}
		}
		
		override protected function addListeners():void{
			for each(var itm:CFM_SimpleButton in itemArray){
				itm.addEventListener(CFM_SimpleButtonEvent.BUTTON_CLICKED, itemSelected, false, 0, true);
			}
			
			button.addEventListener(CFM_SimpleButtonEvent.BUTTON_CLICKED, buttonSelected, false, 0, true);
		}
		
		public function openMenu():void{
			menuOpen = true;
			
			TweenMax.to(itemHolder, 0, {autoAlpha:1});
			TweenMax.to(itemHolderMask, .1, {scaleY:1});
			
			dispatchEvent(new CFM_DropdownMenuEvent(CFM_DropdownMenuEvent.OPEN_MENU, myId, "", currentSelection));
		}
		
		public function validateOptions(_options:Array):void{
			var optionsS:String = _options.toString();
			
			for each(var i:CFM_SimpleButton in itemArray){
				var valid:Boolean = true;
				
				for each(var v:String in _options){
					if(i.labelText == v){
						valid = false;
					}
				}
				
				if(valid){
					i.activate();
				} else {
					i.deActivate();
				}
			}
		}
		
		public function closeMenu():void{
			menuOpen = false;
			
			TweenMax.to(itemHolder, 0, {delay:.1, autoAlpha:0});
			TweenMax.to(itemHolderMask, .1, {scaleY:0});
		}
		
		public function buttonSelected(e:CFM_SimpleButtonEvent):void{
			killTweens();

			menuOpen ? closeMenu() : openMenu();
		}
		
		public function removeClicked(e:CFM_SimpleButtonEvent):void{
			killTweens();
			
			updateSelection(buttonLabelParams.text);
			dispatchEvent( new CFM_DropdownMenuEvent(CFM_DropdownMenuEvent.CLEAR_SELECTION, myId, e.value, currentSelection));
		}
		
		public function itemSelected(e:CFM_SimpleButtonEvent):void{
			killTweens();
			closeMenu();
			
			updateSelection(e.labelText);
			dispatchEvent( new CFM_DropdownMenuEvent(CFM_DropdownMenuEvent.ITEM_SELECTED, myId, e.value, currentSelection ));
		}
		
		public function updateSelection(_value:String):void{
			currentSelection = _value;
			button.updateLabel(_value);
		}
		
		public function enable():void{
			button.activate();
		}
		
		public function disable():void{
			button.deActivate();
		}
		
		public function killTweens():void{
			TweenMax.killTweensOf(itemHolder);
			TweenMax.killTweensOf(itemHolderMask);
		}
		
		override protected function removeListeners():void{
			removeEventListener( Event.REMOVED_FROM_STAGE, destroy );
			
			for each(var itm:CFM_SimpleButton in itemArray){
				itm.removeEventListener(CFM_SimpleButtonEvent.BUTTON_CLICKED, itemSelected);
			}
			
			button.removeEventListener(CFM_SimpleButtonEvent.BUTTON_CLICKED, buttonSelected);
		}
		
		override protected function startDestroy():void{
			killTweens();
			
			while(itemHolder.numChildren>0){
				itemHolder.removeChildAt(0);
			}
		}
	}
}